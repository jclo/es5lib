{"version":3,"names":[],"mappings":"","sources":["es5lib.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.ES5Lib = f()}})(function(){var define,module,exports;return (function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){\n(function (global){\n/** ****************************************************************************\n *\n * A ...\n *\n * prototypal.js is built upon the Prototypal Instantiation pattern. It\n * returns an object by calling its constructor. It doesn't use the new\n * keyword.\n *\n * Private Functions:\n *  . ...                    ...,\n *\n * Public Methods:\n *  . string                 returns a string message,\n *  . array                  returns an array message,\n *\n *\n * @namespace    ES5Lib\n * @dependencies none\n * @exports      -\n * @author       -\n * @since        0.0.0\n * @version      -\n * ************************************************************************** */\n/* eslint one-var: 0, semi-style: 0 */\n\n'use strict';\n\n// -- Local modules\nvar util = require('./util/util')\n  ;\n\n// -- Local constants\n\n// -- Local variables\nvar ES5Lib\n  , previousES5Lib\n  , methods\n  , root\n  ;\n\n// Define the global space (lost with Browserify):\n/* eslint-disable space-infix-ops, block-spacing, space-before-blocks, semi, keyword-spacing, no-restricted-globals, max-len */\n/* istanbul ignore next */\nif (typeof window!=='undefined'){root=window}else if(typeof global!=='undefined'){root=global}else if(typeof self!=='undefined'){root=self}else{root=this}\n/* eslint-enable space-infix-ops, block-spacing, space-before-blocks, semi, keyword-spacing, no-restricted-globals */\n/* eslint-enable max-len */\n\n\n// -- Public -------------------------------------------------------------------\n\n/**\n * Creates and returns the object ES5Lib.\n * (Prototypal Instantiation Pattern)\n *\n * @constructor ()\n * @public\n * @param {arg1}          -,\n * @returns {Object}  returns the ES5Lib object,\n * @since 0.0.0\n */\nES5Lib = function(name) {\n  var obj = Object.create(methods);\n  obj.name = name;\n  return obj;\n};\n\n// Saves the previous value of the library variable, so that it can be\n// restored later on, if noConflict is used.\npreviousES5Lib = root.ES5Lib;\n\n// Runs ES5Lib in noConflict mode, returning the ES5Lib variable to its\n// previous owner. Returns a reference to this ES5Lib object.\n/* istanbul ignore next */\n/* eslint-disable no-param-reassign */\nES5Lib.noConflict = function() {\n  root.ES5Lib = previousES5Lib;\n  return this;\n};\n/* eslint-enable no-param-reassign */\n\n// Current version of the library:\nES5Lib.VERSION = '{{lib:version}}';\n\n// Export the module:\nmodule.exports = ES5Lib;\n\n\n// -- Public Methods ---------------------------------------------------------\n\nmethods = {\n\n  /**\n   * Returns a string message.\n   *\n   * @function ()\n   * @public\n   * @param {}           -,\n   * @returns {String}   returns a string message,\n   * @since 0.0.0\n   */\n  string: function() {\n    return util.printStringMessage();\n  },\n\n  /**\n   * Returns an array message.\n   *\n   * @function ()\n   * @public\n   * @param {}          -,\n   * @returns {Array}   returns an array message,\n   * @since 0.0.0\n   */\n  array: function() {\n    return util.printArrayMessage();\n  }\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./util/util\":2}],2:[function(require,module,exports){\n/** ****************************************************************************\n *\n * A ...\n *\n * basic.js is just a literal object that contains a set of functions. It\n * can't be intantiated.\n *\n * Private Functions:\n *  . ...                    ...,\n *\n * Public Functions:\n *  . string                 returns a string message,\n *  . array                  returns an array message,\n *\n *\n * @namespace    util\n * @dependencies none\n * @exports      -\n * @author       -\n * @since        0.0.0\n * @version      -\n * ************************************************************************** */\n/* eslint one-var: 0, semi-style: 0 */\n\n'use strict';\n\n// -- Local modules\n\n// -- Local constants\n\n// -- Local variables\n\n\n// -- Private Functions ---------------------------------------------------------\n\n\n// -- Public Functions ---------------------------------------------------------\n\nmodule.exports = {\n\n  /**\n   * Returns a string message.\n   *\n   * @function ()\n   * @public\n   * @param {}           -,\n   * @returns {String}   returns a string message,\n   * @since 0.0.0\n   */\n  printStringMessage: function() {\n    return 'I am a string!';\n  },\n\n  /**\n   * Returns an array message.\n   *\n   * @function ()\n   * @public\n   * @param {}          -,\n   * @returns {Array}   returns an array message,\n   * @since 0.0.0\n   */\n  printArrayMessage: function() {\n    return 'I am an array!';\n  }\n};\n\n},{}]},{},[1])(1)\n});"],"file":"es5lib.js"}